#!/usr/bin/env python3# -*- coding: utf-8 -*-"""Created on Sun May  8 17:33:54 2022@author: Mingzhe Wang"""# encapsulate the function so that we sort the entire array by default.def quicksort(arr):  quicksort_rec(arr, 0, len(arr) - 1)def quicksort_rec(arr, lo, hi):  # conquer  if (lo >= hi):    # if array length <= 1    return  # divide & merge  else:    # else array length > 1     # (note case like lo > hi will not happen based on our recursive calling strategy)    pi = partition(arr, lo, hi)    quicksort_rec(arr, lo, pi - 1)    quicksort_rec(arr, pi + 1, hi)def partition(arr, lo, hi):  pivot = arr[hi] # since we always choose the rightmost element as the pivot.  i = lo - 1    # note in python, range(lo, hi) i.e. interval [lo, hi - 1] or [lo, hi) in math.  for j in range(lo, hi):    if (arr[j] <= pivot):      i = i + 1      arr[i], arr[j] = arr[j], arr[i]    # else, do nothing  arr[i+1], arr[hi] = arr[hi], arr[i+1]  return i+1# test partarr = [8,7,6,1,0,9,2]quicksort(arr)